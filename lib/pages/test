// story_page.dart
import 'dart:io';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'dart:typed_data';


class StoryPage extends StatefulWidget {
  const StoryPage({Key? key}) : super(key: key);

  @override
  State<StoryPage> createState() => _StoryPageState();
}

class _StoryPageState extends State<StoryPage> {
  final currentUser = FirebaseAuth.instance.currentUser!;
  List<String> matchedUserIds = [];
  List<Map<String, dynamic>> allStories = [];
  bool hasStories = false;

  Map<String, Map<String, dynamic>> userInfoCache = {}; // 🔹 預先緩存使用者資料
  Map<String, bool> _updatingLikes = {}; // storyId => 是否正在更新
  
  @override
  void initState() {
    super.initState();
    _loadMatchedUsers();
  }

  Future<void> _loadMatchedUsers() async {
    final snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(currentUser.uid)
        .collection('matches')
        .get();

    matchedUserIds = snapshot.docs.map((doc) => doc.id).toList();
    matchedUserIds.add(currentUser.uid); // 包含自己

    await _loadStories();
  }

  Future<void> _loadStories() async {
    List<Map<String, dynamic>> tempStories = [];

    // 🔹 Step1：預先抓取所有使用者資料，避免 StoryCard 每次 FutureBuilder
    for (var uid in matchedUserIds) {
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(uid).get();
      userInfoCache[uid] = userDoc.data() ?? {};
    }

    // 🔹 Step2：抓 stories
    for (var uid in matchedUserIds) {
      final storySnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(uid)
          .collection('stories')
          .get();

      for (var doc in storySnapshot.docs) {
        final data = doc.data();
        data['storyId'] = doc.id;
        data['userId'] = uid;
        tempStories.add(data);
      }
    }

    // 🔹 Step3：依照 timestamp 排序
    tempStories.sort((a, b) {
      final tsA = (a['timestamp'] as Timestamp?)?.toDate() ?? DateTime(2000);
      final tsB = (b['timestamp'] as Timestamp?)?.toDate() ?? DateTime(2000);
      return tsB.compareTo(tsA);
    });

    setState(() {
      allStories = tempStories;
      hasStories = tempStories.isNotEmpty;
    });
  }


void _openAddStoryDialog({String? storyId, Map<String, dynamic>? existingData}) async {
省略
}


  void _toggleLike(String userId, String storyId, List likes) async {
省略
  }


  
  Future<void> _updateLikeInFirebase(String userId, String storyId, List<dynamic> likes) async {
省略
}


  void _deleteStory(String storyId) async {
省略
  }




  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFCD3F8F3),
      body: Padding(
        padding: const EdgeInsets.fromLTRB(12, 48, 12, 12),
        child: Column(
          children: [
            // 頂部標題區（第二組UI風格）
            Container(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
              decoration: BoxDecoration(
                color: Color(0xFFFFC8CA),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: Colors.black, width: 1.5),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  )
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Expanded(
                    flex: 1,
                    child: Image(
                      image: AssetImage('assets/paw.png'),
                      width: 22,
                    ),
                  ),
                  const SizedBox(width: 8),
                  const Expanded(
                    flex: 6,
                    child: Text(
                      "動態",
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: IconButton(
                      padding: EdgeInsets.zero, // 移除預設內距
                      iconSize: 43, // 確保圖片大小一致
                      icon: Image.asset('assets/star.png'),
                      onPressed: () {
                        _openAddStoryDialog();
                      },
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: IconButton(
                      icon: const Icon(Icons.more_vert, color: Colors.black, size: 30),
                      onPressed: () {
                        // TODO: 搜尋或更多功能
                      },
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 12),
            // 動態列表 
            Expanded(
              child: hasStories
                  ? ListView.builder(
                      key: const PageStorageKey('storyList'), // 🔹 保持 scroll state
                      cacheExtent: 10, // 🔹 預先快取上下 10 個 item
                      physics: const AlwaysScrollableScrollPhysics(), // ✅ 確保垂直滾動
                      itemCount: allStories.length,
                      itemBuilder: (context, index) =>
                        StoryCard(
                           story: allStories[index], // 你的 Map<String, dynamic>
                           currentUserId: currentUser.uid,
                           userInfoCache: userInfoCache, // 🔹 傳入緩存使用者資料
                           onEdit: ({String? storyId, Map<String, dynamic>? existingData}) {
                             _openAddStoryDialog(storyId: storyId, existingData: existingData);
                           },
                           onDelete: (String storyId) {
                             _deleteStory(storyId);
                           },
                           onToggleLike: (String userId, String storyId, List<String> likes) {
                             _toggleLike(userId, storyId, likes);
                           },
                           onShowComments: (String userId, String storyId) {
                             _showComments(userId, storyId);
                           },
                         )

                    )
                  
                  : const Center(
                      child: Text(
                        "目前沒有其他人的動態",
                        style: TextStyle(fontSize: 16, color: Colors.grey),
                      ),
                    ),
            ),
            
            
          ],
        ),
      )
      /*body: hasStories
        ? ListView.builder(
            itemCount: allStories.length,
            itemBuilder: (context, index) => _buildStoryCard(allStories[index]),
            
          )
        : Center(
            child: Text(
              "目前沒有其他人的動態",
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ),*/
    );
    }

  
}





class StoryCard extends StatefulWidget {
  final Map<String, dynamic> story;
  final String currentUserId;
  final Map<String, Map<String, dynamic>> userInfoCache; // 🔹 新增
  // 把原本父層的方法當成 callback 傳進來
  final void Function({String? storyId, Map<String, dynamic>? existingData}) onEdit;
  final void Function(String storyId) onDelete;
  final void Function(String userId, String storyId, List<String> likes) onToggleLike;
  final void Function(String userId, String storyId) onShowComments;

  const StoryCard({
    Key? key,
    required this.story,
    required this.currentUserId,
    required this.userInfoCache,
    required this.onEdit,
    required this.onDelete,
    required this.onToggleLike,
    required this.onShowComments,
  }) : super(key: key);

  @override
  State<StoryCard> createState() => _StoryCardState();
}

class _StoryCardState extends State<StoryCard> {
  bool _isExpanded = false;       // ← 只用一個 bool 狀態就好
  int _currentPage = 0;
  late final PageController _pageController;

    // ✅ 抽出文字樣式，讓量測與 Text 使用同一套 Style
  final TextStyle _contentTextStyle = const TextStyle(
    fontFamily: 'Inter',
    fontWeight: FontWeight.w400,
    fontSize: 14,
    height: 1.4,
    color: Colors.black,
  );

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  bool _isTextOverflowing({
    required String text,
    required TextStyle style,
    required double maxWidth,
    required int maxLines,
    required TextDirection textDirection,
  }) {
    final tp = TextPainter(
      text: TextSpan(text: text, style: style),
      maxLines: maxLines,
      textDirection: textDirection,
    )..layout(maxWidth: maxWidth);
    return tp.didExceedMaxLines;
  }

  @override
  Widget build(BuildContext context) {
    final story = widget.story;
    final userId = story['userId'] as String;
    final storyId = story['storyId'] as String;
    final text = story['text'] ?? '';
    final photoUrls = List<String>.from(story['photoUrls'] ?? []);
    final timestamp = (story['timestamp'] as Timestamp?)?.toDate();
    final likes = List<String>.from(story['likes'] ?? []);

    final screenWidth = MediaQuery.of(context).size.width;
    final imageWidth = screenWidth * (370 / 412);
    final imageHeight = imageWidth * (358 / 370); // 用你的原始比例換算高度

    // 🔹 使用緩存資料取代 FutureBuilder
    final userData = widget.userInfoCache[userId] ?? {};
    final name = userData['name'] ?? '使用者';
    final photoUrl = userData['photoUrl'];
    
    return Container(
      width: screenWidth * (387 / 412),
      margin: const EdgeInsets.only(bottom: 11),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border.all(color: Colors.black, width: 2),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // 頭像 + 名稱 + 時間 + 更多按鈕（保持原本）
            Row(
              children: [
                // ...（你的原本頭像 + 名稱 + PopupMenuButton 代碼）
                Container(
                  width: screenWidth * (34 / 412),
                  height: screenWidth * (34 / 412),
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: const Color.fromRGBO(255, 200, 202, 1),
                      width: 2,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.3),
                        offset: const Offset(3, 4),
                        blurRadius: 4,
                      ),
                    ],
                  ),
                  child: CircleAvatar(
                    backgroundImage: (photoUrl != null && photoUrl.isNotEmpty)
                        ? NetworkImage(photoUrl)
                        : null,
                    child: (photoUrl == null || photoUrl.isEmpty)
                        ? const Icon(Icons.person, size: 18)
                        : null,
                  ),
                ),
                SizedBox(width: screenWidth * (10 / 412)),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      name,
                      style: const TextStyle(
                        fontFamily: 'Kiwi Maru',
                        fontWeight: FontWeight.w500,
                        fontSize: 15,
                        height: 1.0,
                        color: Colors.black,
                      ),
                    ),
                    if (timestamp != null)
                      Text(
                        timeago.format(timestamp),
                        style: const TextStyle(
                          fontSize: 12,
                          color: Color.fromRGBO(130, 130, 130, 1),
                        ),
                      ),
                  ],
                ),
                const Spacer(),
                if (userId == widget.currentUserId)
                  PopupMenuButton<String>(
                    icon: const Icon(Icons.more_horiz),
                    onSelected: (value) {
                      if (value == 'edit') {
                        widget.onEdit(storyId: storyId, existingData: story);
                      } else if (value == 'delete') {
                        widget.onDelete(storyId);
                      }
                    },
                    itemBuilder: (_) => const [
                      PopupMenuItem(value: 'edit', child: Text('編輯')),
                      PopupMenuItem(value: 'delete', child: Text('刪除')),
                    ],
                  ),
              ],
            ),
            const SizedBox(height: 8),
            // 圖片區（多圖可滑動）
            if (photoUrls.isNotEmpty)
              Center(
                child: SizedBox(
                  width: imageWidth,
                  height: imageHeight,
                  child: Stack(
                    children: [
                      // 🔹 使用 PageView.builder + keepAlive 避免每次重建
                      PageView.builder(
                        controller: _pageController,
                        itemCount: photoUrls.length,
                        onPageChanged: (index) {
                          setState(() => _currentPage = index);
                        },
                        itemBuilder: (context, index) {
                          return _StoryImage(
                            url: photoUrls[index],
                            width: imageWidth,
                            height: imageHeight,
                          );
                        },
                      ),
                      // 圖片頁數指示器
                      Positioned(
                        top: 8,
                        right: 8,
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.black.withOpacity(0.5),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            "${_currentPage + 1}/${photoUrls.length}",
                            style: const TextStyle(color: Colors.white, fontSize: 12),
                          ),
                        ),
                      ),
                      // 頁數圓點
                      Positioned(
                        bottom: 8,
                        left: 0,
                        right: 0,
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: List.generate(photoUrls.length, (index) {
                            final active = _currentPage == index;
                            return Container(
                              margin: const EdgeInsets.symmetric(horizontal: 2),
                              width: active ? 8 : 6,
                              height: active ? 8 : 6,
                              decoration: BoxDecoration(
                                shape: BoxShape.circle,
                                color: active
                                    ? Colors.white
                                    : Colors.white.withOpacity(0.5),
                              ),
                            );
                          }),
                        ),
                      ),
                    ],
                  ),
                ),
              )
            else
              // 無圖顯示預設圖片
              Center(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(4),
                  child: Image.asset(
                    'assets/qing.png',
                    width: imageWidth,
                    height: imageHeight,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
            const SizedBox(height: 12),
            // 文字內容（保持原本可展開/收起邏輯）
            if (text.isNotEmpty)
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    final isOverflow = _isTextOverflowing(
                      text: text,
                      style: _contentTextStyle,
                      maxWidth: constraints.maxWidth,
                      maxLines: 2,
                      textDirection: Directionality.of(context),
                    );
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          text,
                          style: _contentTextStyle,
                          maxLines: _isExpanded ? null : 2,
                          overflow: _isExpanded ? TextOverflow.visible : TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 4),
                        if (!_isExpanded && isOverflow)
                          GestureDetector(
                            onTap: () => setState(() => _isExpanded = true),
                            child: const Text("顯示更多",
                              style: TextStyle(
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w400,
                                fontSize: 14,
                                height: 1.4,
                                color: Colors.black,
                              ),
                            ),
                          ),
                        if (_isExpanded)
                          GestureDetector(
                            onTap: () => setState(() => _isExpanded = false),
                            child: const Text("收起",
                              style: TextStyle(
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w400,
                                fontSize: 14,
                                height: 1.4,
                                color: Colors.black,
                              ),
                            ),
                          ),
                      ],
                    );
                  },
                ),
              ),
            const SizedBox(height: 12),
            // 按讚與留言（保持原本 StreamBuilder 讀留言）
            Row(
              children: [
                IconButton(
                  icon: Icon(
                    likes.contains(widget.currentUserId)
                        ? Icons.favorite
                        : Icons.favorite_border,
                    color: Colors.red,
                  ),
                  onPressed: () => widget.onToggleLike(userId, storyId, likes),
                ),
                Text('${likes.length}'),
                const SizedBox(width: 12),
                StreamBuilder<QuerySnapshot>(
                  stream: FirebaseFirestore.instance
                      .collection('users')
                      .doc(userId)
                      .collection('stories')
                      .doc(storyId)
                      .collection('comment')
                      .snapshots(),
                  builder: (context, commentCountSnap) {
                    final count = commentCountSnap.hasData
                        ? commentCountSnap.data!.docs.length
                        : 0;
                    return Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.comment),
                          onPressed: () => widget.onShowComments(userId, storyId),
                        ),
                        Text('$count'),
                      ],
                    );
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );

  }
}

class _StoryImage extends StatefulWidget {
  final String url;
  final double width;
  final double height;
  const _StoryImage({required this.url, required this.width, required this.height});

  @override
  State<_StoryImage> createState() => _StoryImageState();
}

class _StoryImageState extends State<_StoryImage> with AutomaticKeepAliveClientMixin {
  @override
  Widget build(BuildContext context) {
    super.build(context);
    return ClipRRect(
      borderRadius: BorderRadius.circular(4),
      child: CachedNetworkImage(
        imageUrl: widget.url,
        width: widget.width,
        height: widget.height,
        fit: BoxFit.contain,
        placeholder: (context, url) => Center(child: CircularProgressIndicator()),
        errorWidget: (context, url, error) => Icon(Icons.error),
      ),
    );
  }

  @override
  bool get wantKeepAlive => true;
}

